[{"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/index.js":"1","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/App.js":"2","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/reportWebVitals.js":"3","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/services/cartoon-service.js":"4","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/config/index.js":"5","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/components/imageCropCartoon.js":"6","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/components/footer.js":"7"},{"size":521,"mtime":1614312136718,"results":"8","hashOfConfig":"9"},{"size":659,"mtime":1615560386445,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612231242858,"results":"11","hashOfConfig":"9"},{"size":642,"mtime":1613433950726,"results":"12","hashOfConfig":"9"},{"size":155,"mtime":1616127401377,"results":"13","hashOfConfig":"9"},{"size":7876,"mtime":1616173106114,"results":"14","hashOfConfig":"9"},{"size":887,"mtime":1615942092263,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"w0rykf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/index.js",[],["33","34"],"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/App.js",["35","36"],"import logo from './images/logo.svg';\nimport './css/App.css';\nimport ImageCartoon from \"./components/imageCropCartoon.js\";\nimport FooterPage from \"./components/footer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n          <h1 style={{background:'#0077BE',\n                      padding:'30px',\n                      color:'#FFFFFF'}}>Avatar Image Generator</h1>\n      <div style={{margin:'30px'}}>\n          <a >Here you can create a virtual avatar based on your appearance. Just upload a picture of your face below, crop it, and you're done!</a>\n      </div>\n      <ImageCartoon />\n      <FooterPage />\n    </div>\n  );\n}\n\nexport default App;\n","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/reportWebVitals.js",[],"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/services/cartoon-service.js",[],"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/config/index.js",[],"/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/components/imageCropCartoon.js",["37","38"],"import React, {useState} from 'react';\nimport Dropzone from 'react-dropzone-uploader';\nimport cartoonService from \"../services/cartoon-service\";\nimport '../css/App.css';\nimport {Grid, Typography} from \"@material-ui/core\";\nimport PublishIcon from '@material-ui/icons/Publish';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Button from '@material-ui/core/Button';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst typefilesAccepted = \".jpg,.jpeg,.png\"\nconst cartoonDefaultFile = 'https://static.thenounproject.com/png/574704-200.png'\nconst faceDefaultFile = 'https://static.thenounproject.com/png/574704-200.png'\n\n\n\nfunction ImageCartoon(){\n\n    const [cartoon, setCartoon] = useState({file: cartoonDefaultFile})\n    const [face, setFace] = useState({nameFile:\"\", file: faceDefaultFile})\n    const [faceCrop, setFaceCrop] = useState({image: null, \n                                              crop:{ aspect: 1/1 },\n                                              imageCropped: null })\n\n    const handleSubmit = async (files, allFiles) => {\n        convertFaceToCartoon()\n      }   \n\n    \n    const convertFaceToCartoon = async () => {\n\n            var file;\n            \n            console.log('xd::', faceCrop.imageCropped)\n            try{\n                console.log('cropped image')\n                let blob = await fetch(faceCrop.imageCropped).then(r => r.blob());\n              \n                file = new File([blob], face.nameFile + \".png\", {\n                  type: \"text/png\",\n                });  \n\n                  \n                const res = await cartoonService.sendImageToConvert(file);\n    \n                const { data } = await cartoonService.getCartoonImage(res.data.filename_cartoon);\n                setCartoon({ file: data });\n      \n            }catch(e){\n                try{\n                    console.log('normal image')\n                   file = face.file\n\n                     \n                const res = await cartoonService.sendImageToConvert(file);\n    \n                const { data } = await cartoonService.getCartoonImage(res.data.filename_cartoon);\n                setCartoon({ file: data });\n      \n                }catch(e){\n                    console.log('error sending image to convert cartoon');\n                    console.error(e);\n                }\n            }\n\n\n    } \n\n    const handleChangeStatus = ({ meta, file }, status) => { \n        console.log(status, meta, file)\n\n        if(status==='done'){\n            handleChangeDone({file})\n        } \n\n        if(status==='removed'){\n            handleChangeRemoved()\n        }\n        \n    }\n\n    const handleChangeRemoved = () => {\n\n        setFace({nameFile: \"\", \n                 file: faceDefaultFile\n        })\n\n        setCartoon({\n            file: cartoonDefaultFile\n        })\n\n        setFaceCrop(\n            {image: null, \n                crop:{ aspect: 1/1 },\n                imageCropped: null }\n        )\n    }\n\n\n    const handleChangeDone = ({file})=>{\n        try {\n            setFace({nameFile: file.name.split('.')[0], \n                     file: file\n                    })\n            \n            const currentFile = file\n            const myFileItemReader = new FileReader()\n            myFileItemReader.addEventListener(\"load\", ()=>{\n                // console.log(myFileItemReader.result)\n                const myResult = myFileItemReader.result\n                console.log('myresult::', myResult)\n                setFaceCrop({...faceCrop,\n                    image: myResult})  \n            }, false)\n\n            myFileItemReader.readAsDataURL(currentFile)\n\n\n          } catch (e) {\n            console.log('error subiendo imagen para convertir a cartoon');\n            console.error(e);\n          }\n    }\n\n\n    const onChangeCrop = crop => {\n        setFaceCrop({...faceCrop,\n                     crop: crop})    \n    }\n\n    const handleOnCropComplete = (crop, pixelCrop) =>{\n        getCroppedImg()\n    }    \n\n    function getCroppedImg() {\n        \n        \n        const image = new Image()\n        image.src = faceCrop.image\n\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = faceCrop.crop.width;\n        canvas.height = faceCrop.crop.height;\n        const ctx = canvas.getContext('2d');\n      \n        ctx.drawImage(\n          image,\n          faceCrop.crop.x * scaleX,\n          faceCrop.crop.y * scaleY,\n          faceCrop.crop.width * scaleX,\n          faceCrop.crop.height * scaleY,\n          0,\n          0,\n          faceCrop.crop.width,\n          faceCrop.crop.height,\n        );\n      \n        const base64Image = canvas.toDataURL('image/jpg');        \n        setFaceCrop({...faceCrop,\n            imageCropped: base64Image\n            })\n\n      }    \n\n\n    return (\n        <div>\n \n            <div>\n                <div style={{margin:'50px'}}>\n                    <ReactCrop src={typeof face.file === 'string' ? face.file : URL.createObjectURL(face.file)} \n                                crop={faceCrop.crop} onChange={onChangeCrop}\n                                onComplete={handleOnCropComplete}\n                                />\n                </div> \n                <div style={{margin:'30px'}}>\n                    <Dropzone\n                        onChangeStatus={handleChangeStatus}\n                        accept={typefilesAccepted}\n                        onSubmit={handleSubmit}\n                        maxFiles={1}\n                        styles={{\n                            dropzone: { width: '50%', height: 200, overflow: 'hidden', backgroundColor: '#ECECEC' },\n\n                        }}\n                        inputContent={(\n                            <Grid key=\"1\" container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                            <Grid item xs={3}>\n                            <PublishIcon style={{ fontSize: 80, color: '#000000' }} />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"h6\"> Drag or select a face image </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body2\">Allowed formats (.jpg, .jpeg, .png)</Typography>\n                            </Grid>\n                            </Grid>\n                        )}\n                        submitButtonContent=\"Convert to cartoon\"\n                    >   \n                    </Dropzone>\n                </div>\n                <div >\n                <img src={faceCrop.imageCropped} alt='Cropped Image' \n                        style={{\n                            height: \"200px\",\n                            width:\"200px\",\n                            margin:\"20px\"\n                            }}\n                    />\n                    <img src={typeof cartoon.file === 'string' ? cartoon.file : URL.createObjectURL(cartoon.file)} \n                        style={{\n                        height: \"200px\",\n                        width:\"200px\",\n                        margin:\"20px\"\n                        }}\n                        className='cartoonImage'\n                    />\n                </div>\n                <div style={{margin:'30px',\n                            marginBottom:'100px'}}>\n                    <a href={typeof cartoon.file === 'string' ? cartoon.file : URL.createObjectURL(cartoon.file)} download={face.nameFile + \"_cartoon.jpg\"}>\n                        <Button variant=\"contained\" color=\"primary\" >\n                                Download\n                        </Button>\n                    </a>\n                </div>    \n            </div>\n        </div>\n    )\n\n}\n\nexport default ImageCartoon;","/home/stevramos/Documents/personal_projects/xgan/avatar-image-generator-app/src/components/footer.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"48","line":13,"column":11,"nodeType":"49","endLine":13,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":207,"column":17,"nodeType":"49","endLine":213,"endColumn":23},{"ruleId":"52","severity":1,"message":"53","line":214,"column":21,"nodeType":"49","endLine":221,"endColumn":23},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]